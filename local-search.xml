<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Codeforces Round 849 (Div. 4)</title>
    <link href="/2023/Codeforces-Round-849-Div-4/"/>
    <url>/2023/Codeforces-Round-849-Div-4/</url>
    
    <content type="html"><![CDATA[<p><del>前八道甚至七道都是简单题.</del></p><h3 id="A-Codeforces-Checking"><a href="#A-Codeforces-Checking" class="headerlink" title="A. Codeforces Checking"></a><a href="https://codeforces.com/contest/1791/problem/A">A. Codeforces Checking</a></h3><blockquote><p>输入一个字符，判断这个字符在 <code>codeforces</code> 中有没有出现过.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string cf = <span class="hljs-string">&quot;codeforces&quot;</span>;<br><span class="hljs-type">char</span> inp;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    std::cin &gt;&gt; inp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> i : cf) <span class="hljs-keyword">if</span>(i == inp)&#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>); <span class="hljs-keyword">return</span>; &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="B-Following-Directions"><a href="#B-Following-Directions" class="headerlink" title="B. Following Directions"></a><a href="https://codeforces.com/contest/1791/problem/B">B. Following Directions</a></h3><blockquote><p>给一串字符串，每个字符代表一次操作，有上下左右（UDLR）四种操作，表示向上、向下、向左、向右的移动.</p><p>从初始坐标 $(0, 0)$ 开始移动，问路径是否经过 $(1, 1)$</p></blockquote><p>模拟.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> len;<br>std::string inp;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    std::cin &gt;&gt; len &gt;&gt; inp;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> m : inp)&#123;<br>        <span class="hljs-keyword">if</span>(m == <span class="hljs-string">&#x27;U&#x27;</span>) y++;<br>        <span class="hljs-keyword">if</span>(m == <span class="hljs-string">&#x27;D&#x27;</span>) y--;<br>        <span class="hljs-keyword">if</span>(m == <span class="hljs-string">&#x27;L&#x27;</span>) x--;<br>        <span class="hljs-keyword">if</span>(m == <span class="hljs-string">&#x27;R&#x27;</span>) x++;<br>        <span class="hljs-keyword">if</span>(x == <span class="hljs-number">1</span> &amp;&amp; y == <span class="hljs-number">1</span>)&#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>); <span class="hljs-keyword">return</span>; &#125;<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="C-Prepend-and-Append"><a href="#C-Prepend-and-Append" class="headerlink" title="C. Prepend and Append"></a><a href="https://codeforces.com/contest/1791/problem/C">C. Prepend and Append</a></h3><blockquote><p>给一个 01 串，每次操作可以从两边各删一个字符（前提是两边字符不同），问最多可以操作多少次.</p></blockquote><p>模拟.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> len;<br>std::string inp;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    std::cin &gt;&gt; len &gt;&gt; inp;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = len - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(l &lt; r &amp;&amp; inp[l] - <span class="hljs-string">&#x27;0&#x27;</span> + inp[r] - <span class="hljs-string">&#x27;0&#x27;</span> == <span class="hljs-number">1</span>)&#123;<br>        l++, r--;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, r - l + <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="D-Distinct-Split"><a href="#D-Distinct-Split" class="headerlink" title="D. Distinct Split"></a><a href="https://codeforces.com/contest/1791/problem/D">D. Distinct Split</a></h3><blockquote><p>给一个字符串，你要把这个字符串从中间割开分成 $a, b$ 两个部分，记 $f(str)$ 为字符串 $str$ 中不同字符的个数，求 $f(a)+f(b)$ 的最大值.</p></blockquote><p>枚举切割位置，更新答案. 要注意的是：必须从中间切（$a, b$ 都不是空的）.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> len;<br>std::string inp;<br>std::map &lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; lm, rm;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    lm.<span class="hljs-built_in">clear</span>(); rm.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>, l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    std::cin &gt;&gt; len &gt;&gt; inp;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c : inp) l += lm[c]++ == <span class="hljs-number">0</span>;<br> <br>    l -= --lm[inp[len - <span class="hljs-number">1</span>]] == <span class="hljs-number">0</span>;<br>    r += rm[inp[len - <span class="hljs-number">1</span>]]++ == <span class="hljs-number">0</span>;<br>    ans = l + r;<br> <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = len - <span class="hljs-number">2</span>; i; i--)&#123;<br>        l -= --lm[inp[i]] == <span class="hljs-number">0</span>;<br>        r += rm[inp[i]]++ == <span class="hljs-number">0</span>;<br>        ans = std::<span class="hljs-built_in">max</span>(ans, l + r);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="E-Negatives-and-Positives"><a href="#E-Negatives-and-Positives" class="headerlink" title="E. Negatives and Positives"></a><a href="https://codeforces.com/contest/1791/problem/E">E. Negatives and Positives</a></h3><blockquote><p>给一序列 $a_1, a_2, \dots, a_n$，每次操作可以选相邻两个元素，把他们的正负翻转. 可以操作任意次，求最终 $\sum a_i$ 的最大值.</p></blockquote><p>如果相邻两个元素都是负的，翻转后它们都会变成正的.</p><p>如果相邻两个元素一正一负，翻转后负号会从其中一个元素移动到另一个元素上.</p><p>易得结论：</p><ul><li>当有偶数个负数时，我们可以通过若干次操作，全部翻转成正数.</li><li>当有奇数个负数时，无论经过多少次操作，必然会剩下一个负数.</li></ul><p>要使得 $\sum a_i$ 最大，剩下的一个负号要加在绝对值最小的元素上.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    ll n = <span class="hljs-built_in">read</span>(), cnt = <span class="hljs-number">0</span>, mi = <span class="hljs-number">0x7f7f7f7f</span>, ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        ll now = <span class="hljs-built_in">read</span>();<br>        cnt += now &lt; <span class="hljs-number">0</span>;<br>        now = now &lt; <span class="hljs-number">0</span> ? -now : now;<br>        mi = std::<span class="hljs-built_in">min</span>(mi, now);<br>        ans += now;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, cnt &amp; <span class="hljs-number">1</span> ? ans - mi - mi : ans);<br>&#125;<br></code></pre></td></tr></table></figure><p>要注意的是：$a_i \in [-10^9, 10^9]$，不开 <code>long long</code> 的话，会爆炸.</p><h3 id="F-Range-Update-Point-Query"><a href="#F-Range-Update-Point-Query" class="headerlink" title="F. Range Update Point Query"></a><a href="https://codeforces.com/contest/1791/problem/F">F. Range Update Point Query</a></h3><blockquote><p>给一序列 $a_1, a_2, \dots, a_n$，对它进行若干次操作，操作类型如下：</p><ul><li><code>1 l r</code>：对任意 $a_i \ (i \in [l, r])$，把 $a_i$ 更新成 $a_i$ 各位数之和.</li><li><code>2 p</code>：查询 $a_p$ 的值.</li></ul></blockquote><p>涉及到区间修改、单点查询，考虑使用树状数组维护修改次数，查询时再进行相应的修改.</p><p>注意到：当 $x &lt; 10$ 时，$x$ 各位数之和仍是 $x$ 本身. 我们需要利用此性质避免过多无用计算导致的 <code>TLE</code>. </p><center><img src="https://static.coraa.cn/img/202302041110818.png" alt="警钟长鸣" style="zoom:50%;"/><br><small>警钟长鸣</small></center><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> n, m, tree[<span class="hljs-number">200010</span>], a[<span class="hljs-number">200010</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123; <span class="hljs-keyword">return</span> x &amp; -x; &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> p)</span></span>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(p &gt; <span class="hljs-number">0</span>)&#123;<br>        ret += tree[p];<br>        p -= <span class="hljs-built_in">lowbit</span>(p);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(p &lt;= n)&#123;<br>        tree[p] += x;<br>        p += <span class="hljs-built_in">lowbit</span>(p);<br>    &#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x)&#123;<br>        ret += x % <span class="hljs-number">10</span>;<br>        x /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) tree[i] = <span class="hljs-number">0</span>, a[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">read</span>() == <span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">// opt == 1</span><br>            <span class="hljs-type">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">add</span>(l, <span class="hljs-number">1</span>); <span class="hljs-built_in">add</span>(r+<span class="hljs-number">1</span>, <span class="hljs-number">-1</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// opt == 2</span><br>            <span class="hljs-type">int</span> p = <span class="hljs-built_in">read</span>(); <span class="hljs-keyword">if</span>(a[p] &lt; <span class="hljs-number">10</span>)&#123; <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a[p]); <span class="hljs-keyword">continue</span>; &#125;<br>            <span class="hljs-type">int</span> cnt = <span class="hljs-built_in">qry</span>(p); <span class="hljs-built_in">add</span>(p, -cnt); <span class="hljs-built_in">add</span>(p+<span class="hljs-number">1</span>, cnt);<br>            <span class="hljs-keyword">while</span>(a[p] &gt;= <span class="hljs-number">10</span> &amp;&amp; cnt--) a[p] = <span class="hljs-built_in">calc</span>(a[p]);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, a[p]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="G1-Teleporters-Easy-Version"><a href="#G1-Teleporters-Easy-Version" class="headerlink" title="G1. Teleporters (Easy Version)"></a><a href="https://codeforces.com/contest/1791/problem/G1">G1. Teleporters (Easy Version)</a></h3><blockquote><p>在非负数轴上的整数点中，除原点以外均有一传送台（可以把你传回原点），传送过程消耗 $a_i$ 个金币.</p><p>最开始，你在原点处. 你可以花费 $1$ 个金币向左或向右移动一个单位，也可以花费 $a_i$ 个金币通过未失效的传送台传送回原点.</p><p>传送台只能使用一次，用完就失效了.</p><p>你现在有 $c$ 个金币，问你最多能用几个传送台.</p></blockquote><p>想要使用一个传送台，我们需要从原点走到传送台，再花费对应的代价回到原点.</p><p>所以第 $i$ 个传送台的“使用代价”为 $a_i + i$，我们只需要按照其使用代价从小到大排序，看看手里的硬币够用几个的就行了.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp">ll n, c, a[<span class="hljs-number">200005</span>];<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    n = <span class="hljs-built_in">read</span>(), c = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) a[i] = <span class="hljs-built_in">read</span>() + i;<br>    std::<span class="hljs-built_in">sort</span>(a+<span class="hljs-number">1</span>, a+<span class="hljs-number">1</span>+n);<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        <span class="hljs-keyword">if</span>(now + a[i] &lt;= c) now += a[i];<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i<span class="hljs-number">-1</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n);<br>&#125;<br></code></pre></td></tr></table></figure><p><del>这是个比较愚蠢的写法，但我懒得改了.</del></p><h3 id="G2-Teleporters-Hard-Version"><a href="#G2-Teleporters-Hard-Version" class="headerlink" title="G2. Teleporters (Hard Version)"></a><a href="https://codeforces.com/contest/1791/problem/G2">G2. Teleporters (Hard Version)</a></h3><p><del>睡觉去了.</del></p><hr><p>总结：手速太慢，还没阿克（悲</p><p>债见~</p>]]></content>
    
    
    
    <tags>
      
      <tag>CF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Codeforces Round 848 (Div. 2)</title>
    <link href="/2023/Codeforces-Round-848-Div-2/"/>
    <url>/2023/Codeforces-Round-848-Div-2/</url>
    
    <content type="html"><![CDATA[<p>Hexo 标题里不能带 <code>#</code> 阿（汗</p><p>写完地理选择就去打了，做完 A，B 回来继续写地理综合.</p><h3 id="A-Flip-Flop-Sum"><a href="#A-Flip-Flop-Sum" class="headerlink" title="A. Flip Flop Sum"></a><a href="https://codeforces.com/contest/1778/problem/A">A. Flip Flop Sum</a></h3><blockquote><p>给一个只包含 $1$ 和 $-1$ 的序列，你必须选两个相邻的元素翻转（<code>1</code>变<code>-1</code>、<code>-1</code>变<code>1</code>），问翻转后 $\sum a_i$ 最大值.</p></blockquote><p>记 $\Delta$ 为翻转操作的“收益”，则 $Ans &#x3D; \sum a_i + \Delta$，我们只需要使 $\Delta$ 最大，就能得到最大答案.</p><p>相邻的两个数可以分为以下情况：</p><ul><li>都是 $1$：$\Delta &#x3D; -4$；</li><li>都是 $-1$：$\Delta &#x3D; 4$；</li><li>一个 $1$ 一个 $-1$：$\Delta &#x3D; 0$.</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-type">int</span> mxd = <span class="hljs-number">-4</span>, ans, lst;<br>    ans = lst = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;<br>        <span class="hljs-type">int</span> now = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span>(now == <span class="hljs-number">-1</span> &amp;&amp; lst == <span class="hljs-number">-1</span>) mxd = <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">if</span>(now * lst == <span class="hljs-number">-1</span>) mxd = std::<span class="hljs-built_in">max</span>(mxd, <span class="hljs-number">0</span>);<br>        ans += (lst = now);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans + mxd);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="B-The-Forbidden-Permutation"><a href="#B-The-Forbidden-Permutation" class="headerlink" title="B. The Forbidden Permutation"></a><a href="https://codeforces.com/contest/1778/problem/B">B. The Forbidden Permutation</a></h3><blockquote><p>给长度为 $n$ 的序列 $p$ 和长度为 $m$ 的序列 $a$. 其中 $m \le n$，两序列中均无重复元素，保证 $a$ 序列中的数在 $p$ 里出现过.</p><p>定义 $pos(x)$ 为 $x$ 在 $p$ 序列中的下标.</p><p>对“好序列”的定义为：<strong>存在</strong> $i \in [1, m)$，满足 $pos(a_i) &gt; pos(a_{i+1})$ 或 $pos(a_i) + d &lt; pos(a_{i+1})$.</p><p>每次操作，可以交换 $p$ 中相邻两个元素，问至少需要多少次操作，可以使 $a$ 成为“好序列”.</p></blockquote><p>此题中，我们需要快速找到 $p$ 序列中某个元素的下标，所以读入时反着存.</p><p>考虑序列 $a$ 中相邻两个元素，记作 $l$ 和 $r$. 若要使 $a$ 成为“好序列”，我们需要满足：<br>$$<br>pos(l) &gt; pos(r) \ \ \ or \ \ \ pos(l) + d &lt; pos(r)<br>$$<br>若 $l$ 和 $r$ 不需要任何操作就满足了这个条件，直接输出 $0$.（只要存在一对满足，$a$ 就是“好序列”）</p><p>若未满足：</p><ul><li>考虑第一个条件：要交换 $pos(r) - pos(l)$ 次；</li><li>考虑第二个条件：要交换 $d - (pos(r) - pos(l)) + 1$ 次. 且前提为 $d \le n - 2$.</li></ul><p>遍历更新答案即可.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::map &lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp;<br> <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0x7f7f7f7f</span>;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), d = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++)&#123;<br>        mp[<span class="hljs-built_in">read</span>()] = i;<br>    &#125;<br>    <span class="hljs-type">int</span> lst = <span class="hljs-built_in">read</span>(), now;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++)&#123;<br>        now = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span>(flag || mp[now] &lt; mp[lst] || mp[now] - mp[lst] &gt; d)&#123; flag = <span class="hljs-literal">true</span>; <span class="hljs-keyword">continue</span>; &#125;<br>        ans = std::<span class="hljs-built_in">min</span>(ans, mp[now] - mp[lst]);<br>        <span class="hljs-keyword">if</span>(d &lt;= n<span class="hljs-number">-2</span>) ans = std::<span class="hljs-built_in">min</span>(ans, d - mp[now] + mp[lst] + <span class="hljs-number">1</span>);<br>        lst = now;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, flag ? <span class="hljs-number">0</span> : ans);<br>&#125;<br></code></pre></td></tr></table></figure><p>这题坑点在于：只要 <strong>存在任意一对</strong> 相邻的元素满足上述条件，它就是“好序列”.</p><p><del>两道题都忘了写 lst &#x3D; now，A 题交之前看出来了，B 题 WA 了两发看出来了. 警钟敲烂!!!</del></p><p>债见~</p>]]></content>
    
    
    
    <tags>
      
      <tag>CF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeDB Forces 2023</title>
    <link href="/2023/TypeDB-Forces-2023/"/>
    <url>/2023/TypeDB-Forces-2023/</url>
    
    <content type="html"><![CDATA[<center><del>一车数学结论题，啥也不会. 真不如写我的物理作业了.</del></center><h3 id="A-Exponential-Equation"><a href="#A-Exponential-Equation" class="headerlink" title="A. Exponential Equation"></a><a href="https://codeforces.com/contest/1787/problem/A">A. Exponential Equation</a></h3><blockquote><p>给一个整数 $n$，找任意一对 $(x, y)$ 满足 $x^y \cdot y + y^x \cdot x &#x3D; n$. 若没有，输出 $-1$.</p></blockquote><p>容易看出，若 $n$ 为奇数，则没有符合条件的 $(x, y)$.</p><p>不妨令 $y &#x3D; 1$，则 $x$ 需满足 $2x &#x3D; n$ 即 $x &#x3D; \frac{n}{2}$.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">if</span>(n &amp; <span class="hljs-number">1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d 1\n&quot;</span>, n/<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h3 id="B-Number-Factorization"><a href="#B-Number-Factorization" class="headerlink" title="B. Number Factorization"></a><a href="https://codeforces.com/contest/1787/problem/B">B. Number Factorization</a></h3><blockquote><p>给一个整数 $n$，把它分解成 $\prod a_i^{p_i}$（$a_i &gt; 1, p_i &gt; 0$）的形式，要求 $a_i$ 是若干个<strong>不同质数</strong>之积.</p><p>求 $\sum a_i\cdot p_i$ 的最大值.</p></blockquote><p>由题，我们要先把 $n$ 分解成若干个质因数相乘的形式，过程不再赘述.</p><p>由于多次询问，需要预处理出 $\sqrt n$ 以内的质数.</p><p>为了最大化 $\sum a_i \cdot p_i$，考虑将不同质数乘在一起，其变化如下：<br>$$<br>a^i \times b^j \to (ab)^k \times a^{i-k} \times b^{j-k}<br>$$<br>由此，$\sum a_i \cdot p_i$ 的值增加了：<br>$$<br>\Delta &#x3D; kab + (i-k)a + (j-k)b - ia - jb &#x3D; k(ab - (a+b))<br>$$<br>由于 $a, b &gt; 2 \Rightarrow \Delta &gt; 0$，合并后的答案一定是更优的.</p><p>所以我们把能合并的都合并，即可最大化 $\sum a_i \cdot p_i$.</p><p>因为题目要求质数不同，所以我们计算答案时要一层一层处理：相同的质数不能合并到一起.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">long</span> <span class="hljs-type">long</span> prod[<span class="hljs-number">105</span>];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    std::<span class="hljs-built_in">memset</span>(prod, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> prod);<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n = <span class="hljs-built_in">read</span>(), ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> p : pri)&#123;<br>        <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(n % p == <span class="hljs-number">0</span>)&#123;<br>            t++;<br>            prod[t] = prod[t] ? prod[t] * p : p;<br>            n /= p;<br>        &#125;<br>    &#125;<br>    prod[<span class="hljs-number">1</span>] = prod[<span class="hljs-number">1</span>] ? prod[<span class="hljs-number">1</span>] * n : n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) ans += prod[i];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure><p>Q: 为什么只需要预处理出 $\sqrt n$ 以内的质数？为什么试除完剩下的 $n$ 一定是质数？</p><ul><li>若 $x$ 是 $n$ 的因数，则必然存在对应的 $y$ 满足 $xy &#x3D; n$，且 $x \le \sqrt n \le y$.</li><li>若 $\sqrt n$ 以内的质数都不是 $n$ 的因数，则 $n$ 无其他因数，所以 $n$ 为质数.</li></ul><p>太久没写忘掉了，被质因数分解卡了两小时，掉大分咯！</p><p>债见~</p>]]></content>
    
    
    
    <tags>
      
      <tag>CF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Alist-API 非官方文档</title>
    <link href="/2023/Alist-API/"/>
    <url>/2023/Alist-API/</url>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>本文档适用于 <code>Alist V3</code>.</li><li>官方文档请参考 <a href="https://alist.nn.ci/zh/">https://alist.nn.ci/zh/</a>.</li><li>接口响应格式通常为 <code>&#123;&quot;code&quot;:...,&quot;message&quot;:&quot;...&quot;,&quot;data&quot;:...&#125;</code>.</li><li>为节省空间，下文中“响应内容”为请求成功（<code>code == 200</code>）时的 <code>data</code> 部分.</li><li>若 <code>code != 200</code>，可以输出 <code>message</code> 便于进一步调试.</li><li>本文档提供某种接口封装形式作为参考，使用 <code>Python</code> 语言.</li><li>若有更新的 <code>Alist</code> 版本，本文档视情况同步更新.</li><li>时间有限，本文档暂不完善，但覆盖了大部分常用接口.</li></ul><h3 id="获取当前用户信息"><a href="#获取当前用户信息" class="headerlink" title="获取当前用户信息"></a>获取当前用户信息</h3><ul><li><p>请求地址：<code>/api/me</code></p></li><li><p>请求方式：<code>GET</code></p></li><li><p>请求头：</p><ul><li>（可空）<code>Authorization</code>：用户 token 或在 <strong>站点设置-其他</strong> 中获取到的令牌</li></ul></li><li><p>响应内容：</p><ul><li><code>id</code>：用户id</li><li><code>username</code>：用户名</li><li><code>password</code>：未知（很多时候，它都是空的）</li><li><code>base_path</code>：用户的基本路径</li><li><code>role</code>：未知</li><li><code>permission</code>：未知</li><li><code>github_id</code>：用户 <code>github_id</code>（开启 <code>github登入</code> 后会有用，但这是个新功能）</li><li><code>otp</code>：未知</li></ul></li><li><p>说明：当请求头为空时，返回 <code>guest</code> 用户的相关信息.</p></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getProfile</span>():<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.get(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/me&#x27;</span>, headers=headers).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="通过用户名、密码获取-token（登入）"><a href="#通过用户名、密码获取-token（登入）" class="headerlink" title="通过用户名、密码获取 token（登入）"></a>通过用户名、密码获取 token（登入）</h3><ul><li><p>请求地址：<code>/api/auth/login</code></p></li><li><p>请求方式：<code>POST</code></p></li><li><p>请求头：</p><ul><li><code>Content-Type</code>: <code>application/json</code></li></ul></li><li><p>请求参数：</p><ul><li><code>username</code>：用户名</li><li><code>password</code>：密码</li></ul></li><li><p>响应内容：</p><ul><li><code>token</code>：用户 token（一定时间内有效）</li></ul></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getToken</span>(<span class="hljs-params">username, password</span>):<br>    data = &#123;<br>        <span class="hljs-string">&#x27;username&#x27;</span>: username,<br>        <span class="hljs-string">&#x27;password&#x27;</span>: password<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/auth/login&#x27;</span>, data=json.dumps(data), headers=&#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>&#125;).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="获取一个目录下的对象列表"><a href="#获取一个目录下的对象列表" class="headerlink" title="获取一个目录下的对象列表"></a>获取一个目录下的对象列表</h3><ul><li><p>请求地址：<code>/api/fs/list</code></p></li><li><p>请求方式：<code>POST</code></p></li><li><p>请求头：</p><ul><li>（可空）<code>Authorization</code>：用户 token 或在 <strong>站点设置-其他</strong> 中获取到的令牌</li></ul></li><li><p>请求参数：</p><ul><li><p><code>path</code>：相对当前用户 <code>base_path</code> 来说的相对路径</p></li><li><p>（可空）<code>page</code>：页码</p></li><li><p>（可空）<code>per_page</code>：每页对象个数</p></li><li><p>（可空）<code>refresh</code>：是否强制刷新（<code>bool</code>型)</p></li><li><p>（可空）<code>password</code>：路径密码</p></li></ul></li><li><p>响应内容：</p><ul><li><code>content</code>：对于每个对象来说，包含以下参数<ul><li><code>name</code>：对象名</li><li><code>size</code>：对象大小</li><li><code>is_dir</code>：是否为目录（<code>bool</code>型)</li><li><code>modified</code>：修改时间</li><li><code>sign</code>：访问令牌</li><li><code>thumb</code>：（文档）缩略图，部分驱动器可用</li><li><code>type</code>：对象类型</li></ul></li><li><code>total</code>：对象个数</li><li><code>readme</code>：目录的 <code>readme</code>（如果有的话）</li><li><code>write</code>：是否可写（<code>bool</code>型)</li><li><code>provider</code>：存储类型</li></ul></li><li><p>说明：</p><ul><li>请确保传入的 <code>path</code> 是一个目录而不是文件，否则会报错.</li><li>当请求头为空时，以 <code>guest</code> 的身份访问.</li></ul></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getObjectList</span>(<span class="hljs-params">path, password = <span class="hljs-string">&#x27;&#x27;</span></span>):<br>    data = &#123;<br>        <span class="hljs-string">&#x27;page&#x27;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;password&#x27;</span>: password,<br>        <span class="hljs-string">&#x27;path&#x27;</span>: path,<br>        <span class="hljs-string">&#x27;per_page&#x27;</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-string">&#x27;refresh&#x27;</span>: <span class="hljs-literal">False</span><br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/fs/list&#x27;</span>, data=data, headers=headers).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="获取一个对象的信息"><a href="#获取一个对象的信息" class="headerlink" title="获取一个对象的信息"></a>获取一个对象的信息</h3><ul><li><p>请求地址：<code>/api/fs/get</code></p></li><li><p>请求方式：<code>POST</code></p></li><li><p>请求头：</p><ul><li>（可空）<code>Authorization</code>：用户 token 或在 <strong>站点设置-其他</strong> 中获取到的令牌</li></ul></li><li><p>请求参数：</p><ul><li><code>path</code>：相对当前用户 <code>base_path</code> 来说的相对路径</li><li>（可空）<code>password</code>：路径密码</li></ul></li><li><p>响应内容：</p><ul><li><code>name</code>：对象名</li><li><code>size</code>：对象大小</li><li><code>is_dir</code>：是否为目录（<code>bool</code>型)</li><li><code>modified</code>：修改时间</li><li><code>sign</code>：访问令牌</li><li><code>thumb</code>：（文档）缩略图，部分驱动器可用</li><li><code>type</code>：对象类型</li><li><code>raw_url</code>：对象直链</li><li><code>readme</code>：对象的 <code>readme</code>（如果有的话）</li><li><code>provider</code>：存储类型</li><li><code>related</code>：未知</li></ul></li><li><p>说明：当请求头为空时，以 <code>guest</code> 的身份访问.</p></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getObjectInfo</span>(<span class="hljs-params">path, password = <span class="hljs-string">&#x27;&#x27;</span></span>):<br>    data = &#123;<br>        <span class="hljs-string">&#x27;password&#x27;</span>: password,<br>        <span class="hljs-string">&#x27;path&#x27;</span>: path<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/fs/get&#x27;</span>, data=data, headers=headers).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><ul><li><p>请求地址：<code>/api/fs/mkdir</code></p></li><li><p>请求方式：<code>POST</code></p></li><li><p>请求头：</p><ul><li><code>Content-Type</code>: <code>application/json</code></li><li>（可空）<code>Authorization</code>：用户 token 或在 <strong>站点设置-其他</strong> 中获取到的令牌</li></ul></li><li><p>请求参数：</p><ul><li><code>path</code>：要创建的文件夹的相对路径（例如：<code>/Local/new_folder</code>）</li></ul></li><li><p>响应内容：无特殊响应内容.</p></li><li><p>说明：</p><ul><li>当 <code>Authorization</code> 为空时，以 <code>guest</code> 的身份创建.</li><li>请确保 token 所属用户有相应权限.</li></ul></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">MakeDir</span>(<span class="hljs-params">path</span>):<br>    data = &#123; <span class="hljs-string">&#x27;path&#x27;</span>: path &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/fs/mkdir&#x27;</span>, data=json.dumps(data), headers=<span class="hljs-built_in">dict</span>(headers, **ct_json)).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><ul><li><p>请求地址：<code>/api/fs/put</code></p></li><li><p>请求方式：<code>PUT</code></p></li><li><p>请求头：</p><ul><li><code>file-path</code>：文件保存到 <code>Alist</code> 上的相对路径</li><li><code>content-length</code>：文件字节数</li><li>（可空）<code>password</code>：路径密码</li><li>（可空）<code>Authorization</code>：用户 token 或在 <strong>站点设置-其他</strong> 中获取到的令牌</li></ul></li><li><p>请求内容：</p><ul><li>所传文件内容，如：<code>open(localPath, &#39;rb&#39;).read()</code></li></ul></li><li><p>响应内容：无特殊响应内容.</p></li><li><p>说明：</p><ul><li>当 <code>Authorization</code> 为空时，以 <code>guest</code> 的身份上传.</li><li>请确保 token 所属用户有相应权限.</li></ul></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Upload</span>(<span class="hljs-params">localPath, remotePath, fileName, password = <span class="hljs-string">&#x27;&#x27;</span></span>):<br>    upload_header = &#123;<br>        <span class="hljs-string">&#x27;UserAgent&#x27;</span>: UserAgent,<br>        <span class="hljs-string">&#x27;Authorization&#x27;</span>: Authorization,<br>        <span class="hljs-string">&#x27;File-Path&#x27;</span>: parse.quote(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;remotePath&#125;</span>/<span class="hljs-subst">&#123;fileName&#125;</span>&#x27;</span>),<br>        <span class="hljs-string">&#x27;Password&#x27;</span>: password,<br>        <span class="hljs-string">&#x27;Content-Length&#x27;</span>: <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;os.path.getsize(localPath)&#125;</span>&#x27;</span><br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.put(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/fs/put&#x27;</span>, headers=upload_header, data=<span class="hljs-built_in">open</span>(localPath, <span class="hljs-string">&#x27;rb&#x27;</span>).read()).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="删除对象"><a href="#删除对象" class="headerlink" title="删除对象"></a>删除对象</h3><ul><li><p>请求地址：<code>/api/fs/remove</code></p></li><li><p>请求方式：<code>POST</code></p></li><li><p>请求头：</p><ul><li><code>Content-Type</code>: <code>application/json</code></li><li>（可空）<code>Authorization</code>：用户 token 或在 <strong>站点设置-其他</strong> 中获取到的令牌</li></ul></li><li><p>请求参数：</p><ul><li><code>dir</code>：对象所属目录</li><li><code>names</code>：对象名数组，即使只有一个对象，也要放到数组里</li></ul></li><li><p>响应内容：无特殊响应内容.</p></li><li><p>说明：</p><ul><li>当 <code>Authorization</code> 为空时，以 <code>guest</code> 的身份上传.</li><li>请确保 token 所属用户有相应权限.</li></ul></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Remove</span>(<span class="hljs-params"><span class="hljs-built_in">dir</span>, names</span>):<br>    data = &#123;<br>        <span class="hljs-string">&#x27;dir&#x27;</span>: <span class="hljs-built_in">dir</span>,<br>        <span class="hljs-string">&#x27;names&#x27;</span>: names<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/fs/remove&#x27;</span>, data=json.dumps(data), headers=<span class="hljs-built_in">dict</span>(headers, **ct_json)).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="复制对象"><a href="#复制对象" class="headerlink" title="复制对象"></a>复制对象</h3><ul><li><p>请求地址：<code>/api/fs/copy</code></p></li><li><p>请求方式：<code>POST</code></p></li><li><p>请求头：</p><ul><li><code>Content-Type</code>: <code>application/json</code></li><li>（可空）<code>Authorization</code>：用户 token 或在 <strong>站点设置-其他</strong> 中获取到的令牌</li></ul></li><li><p>请求参数：</p><ul><li><code>src_dir</code>：当前对象所属目录</li><li><code>dst_dir</code>：目标目录</li><li><code>names</code>：对象名数组，即使只有一个对象，也要放到数组里</li></ul></li><li><p>响应内容：无特殊响应内容.</p></li><li><p>说明：</p><ul><li>当 <code>Authorization</code> 为空时，以 <code>guest</code> 的身份上传.</li><li>请确保 token 所属用户有相应权限.</li></ul></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Copy</span>(<span class="hljs-params">srcDir, dstDir, names</span>):<br>    data = &#123;<br>        <span class="hljs-string">&#x27;src_dir&#x27;</span>: srcDir,<br>        <span class="hljs-string">&#x27;dst_dir&#x27;</span>: dstDir,<br>        <span class="hljs-string">&#x27;names&#x27;</span>: names<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/fs/copy&#x27;</span>, data=json.dumps(data), headers=<span class="hljs-built_in">dict</span>(headers, **ct_json)).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="移动对象"><a href="#移动对象" class="headerlink" title="移动对象"></a>移动对象</h3><ul><li><p>请求地址：<code>/api/fs/move</code></p></li><li><p>请求方式：<code>POST</code></p></li><li><p>请求头：</p><ul><li><code>Content-Type</code>: <code>application/json</code></li><li>（可空）<code>Authorization</code>：用户 token 或在 <strong>站点设置-其他</strong> 中获取到的令牌</li></ul></li><li><p>请求参数：</p><ul><li><code>src_dir</code>：当前对象所属目录</li><li><code>dst_dir</code>：目标目录</li><li><code>names</code>：对象名数组，即使只有一个对象，也要放到数组里</li></ul></li><li><p>响应内容：无特殊响应内容.</p></li><li><p>说明：</p><ul><li>当 <code>Authorization</code> 为空时，以 <code>guest</code> 的身份上传.</li><li>请确保 token 所属用户有相应权限.</li></ul></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Move</span>(<span class="hljs-params">srcDir, dstDir, names</span>):<br>    data = &#123;<br>        <span class="hljs-string">&#x27;src_dir&#x27;</span>: srcDir,<br>        <span class="hljs-string">&#x27;dst_dir&#x27;</span>: dstDir,<br>        <span class="hljs-string">&#x27;names&#x27;</span>: names<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/fs/move&#x27;</span>, data=json.dumps(data), headers=<span class="hljs-built_in">dict</span>(headers, **ct_json)).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="对象重命名"><a href="#对象重命名" class="headerlink" title="对象重命名"></a>对象重命名</h3><ul><li><p>请求地址：<code>/api/fs/rename</code></p></li><li><p>请求方式：<code>POST</code></p></li><li><p>请求头：</p><ul><li><code>Content-Type</code>: <code>application/json</code></li><li>（可空）<code>Authorization</code>：用户 token 或在 <strong>站点设置-其他</strong> 中获取到的令牌</li></ul></li><li><p>请求参数：</p><ul><li><code>path</code>：对象的相对路径</li><li><code>name</code>：新名字</li></ul></li><li><p>响应内容：无特殊响应内容.</p></li><li><p>说明：</p><ul><li>当 <code>Authorization</code> 为空时，以 <code>guest</code> 的身份上传.</li><li>请确保 token 所属用户有相应权限.</li></ul></li><li><p>Example：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Rename</span>(<span class="hljs-params">path, newName</span>):<br>    data = &#123;<br>        <span class="hljs-string">&#x27;path&#x27;</span>: path,<br>        <span class="hljs-string">&#x27;name&#x27;</span>: newName<br>    &#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> json.loads(requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/api/fs/rename&#x27;</span>, data=json.dumps(data), headers=<span class="hljs-built_in">dict</span>(headers, **ct_json)).text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&#x27;code&#x27;</span>: -<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;message&#x27;</span>: e&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>耻辱柱</title>
    <link href="/2023/%E8%80%BB%E8%BE%B1%E6%9F%B1/"/>
    <url>/2023/%E8%80%BB%E8%BE%B1%E6%9F%B1/</url>
    
    <content type="html"><![CDATA[<center><h1 style="color: red;">警钟敲烂</h1></center><script>    var dates = [        '2023-1-9',        '2023-1-23'    ];</script><ul><li>2023年1月9日，把 $\vec a &#x3D; t(\vec b + \vec c)$ 理解成 $\vec a$ 平分 $\vec b$ 和 $\vec c$，<div id=1 style="display: inline-block;"></div></li><li>2023年1月23日，把 $\frac{\pi}{2}$ 当 $\sin$ 函数零点，<div id=2 style="display: inline-block;"></div></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>复习笔记</title>
    <link href="/2023/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="note note-info">            <p>记一些我可能不太熟的东西在这里. </p>          </div><h3 id="语文"><a href="#语文" class="headerlink" title="语文"></a>语文</h3><ol><li>”顾“有”只是“的意思. ”顾所以导之如何尔“：”只是看你所引导的方法怎样罢了“.</li><li>”务“意为”从事“，可以引申为”追求“.</li></ol><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><ol><li>分奇偶求和时，务必注意最后一项是 $2n$ &#x2F; $2n-1$ 还是 $n$ !!!</li><li>第 9 题若要通过类似“同时除以 $x$”的方式简化计算，务必先考虑 $x&#x3D;0$ 的情况，不然会寄.</li><li>形如 $\vec a &#x3D; t(\vec b + \vec c)$ 的式子，不要看 $\vec b$ 和 $\vec c$ 的系数相同，这两个向量的长度未必相同，不要把 $\vec a$ 当成平分 $\vec b$ 和 $\vec c$ 的向量，不然你会头疼半个晚上，警钟长鸣 !!! （2023年01月09日23时53分留，当事人觉得自己十分弱智）</li></ol><h3 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h3><h3 id="物理"><a href="#物理" class="headerlink" title="物理"></a>物理</h3><ol><li><p>电流 $I &#x3D; \frac{Q}{t} &#x3D; \frac{U}{R} &#x3D; nqSv$.（定义式、决定式、微观表达式）</p></li><li><p>若电子的电量为 $e$，则 $n$ 个电子的电荷量为 $Q &#x3D; ne$；</p><p>由电流的定义式可知 $Q &#x3D; I\Delta t$，所以 $\Delta t$ 时间内流经的电子数 $n &#x3D; \frac{I\Delta t}{e}$；</p><p>若已知电子束速度，可以由 $\Delta t &#x3D; \frac{\Delta l}{v}$ 算出 $\Delta l$ 这一段内的电子数 $n &#x3D; \frac{I\Delta l}{ev}$.</p></li><li><p>单位时间内，由动量定理有 $F &#x3D; m\Delta v$.（$Ft &#x3D; m\Delta v, \ t &#x3D; 1$）</p></li><li><p>类似条形磁铁的磁体，磁体内的磁感线不可忽视. 和磁体外磁感线方向相反，可以抵消.</p></li><li><p>电阻率 $\rho &#x3D; \frac{RS}{L}$，其中 $S$ 是导体的横截面积，$L$ 是导体的长度.</p></li></ol><h3 id="生物"><a href="#生物" class="headerlink" title="生物"></a>生物</h3><ol><li>内环境渗透压升高，刺激 <strong>下丘脑</strong> 的渗透压感受器，在 <strong>大脑皮层</strong> 产生渴觉.</li><li>交感神经&#x2F;副交感神经均为 <strong>传出神经</strong>.</li><li>种群 <strong>增长率&#x3D;出生率-死亡率</strong>，</li></ol><h3 id="地理"><a href="#地理" class="headerlink" title="地理"></a>地理</h3><ol><li>河水在流动的时候，会出现淤积，当这些淤积的泥沙逐渐增多了以后，河水就逐渐地弯曲，甚至会改道.</li><li>当河水曲度过大时，有时会在不断侵蚀下“裁弯取直”.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>高考</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
